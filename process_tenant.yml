---
- name: Process a new tenant
  hosts: all
  connection: local
  gather_facts: False

  vars:
    credentials:
      ip_address: "{{ ip_address }}"
      username: "{{ username }}"
      password: "{{ password }}"
    tenant: "{{ tenant_name | replace(' ', '-') | lower }}"

  roles:
    - role: paloaltonetworks.paloaltonetworks

  tasks:
    - name: ansible tag
      panos_tag_object:
        provider: "{{ credentials }}"
        name: "ansible"
        color: "gold"
        comments: "Added by Ansible"
        commit: False
        state: "{{ state | default('present')}}"

    - name: tenant address object
      panos_address_object:
        provider: "{{ credentials }}"
        name: "{{ tenant }}-subnet"
        value: "{{ tenant_subnet | ipaddr }}"
        description: "Subnet for {{ tenant_name }}"
        tag: ["ansible"]
        commit: False
        state: "{{ state | default('present')}}"

    - name: tenant static route
      panos_static_route:
        provider: "{{ credentials }}"
        name: "{{ tenant }}-route"
        virtual_router: default
        destination: "{{ tenant_subnet | ipaddr }}"
        nexthop: "{{ tenant_nexthop | ipaddr }}"
        nexthop_type: ip-address
        metric: 10
        state: "{{ state | default('present')}}"

    - name: tenant security rule
      panos_security_rule:
        provider: "{{ credentials }}"
        rule_name: "Allow {{ tenant }}"
        description: "Allow access to {{ tenant_name }} sandbox"
        source_zone: ["outside"]
        source_ip: ["any"]
        source_user: ["werum\\{{ tenant }}"]
        destination_zone: ["sandboxes"]
        destination_ip: ["{{ tenant }}-subnet"]
        application: ["ping", "ssh"]
        service: ["application-default"]
        action: "allow"
        antivirus: "default"
        vulnerability: "strict"
        spyware: "strict"
        wildfire_analysis: "default"
        state: "{{ state | default('present')}}"
        tag_name: ["ansible"]
        commit: False

    - name: commit changes
      panos_commit:
        provider: "{{ credentials }}"
      register: commit_output

    - name: wait for commit result
      async_status:
        jid: "{{ item.ansible_job_id }}"
      register: async_commit_result
      until: async_commit_result.finished
      retries: 300
      loop: "{{ commit_output.results }}"
      loop_control:
        loop_var: item
